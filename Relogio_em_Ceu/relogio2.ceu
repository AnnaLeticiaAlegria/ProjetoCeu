//#include "wclock.ceu"
#include "gpio.ceu"

output bool PIN_03; //BUZZER

output bool PIN_13; /*LED1*/
output bool PIN_12; /*LED2*/
output bool PIN_11; /*LED3*/
output bool PIN_10; /*LED4*/

output bool PIN_04; //LATCH_DIO
output bool PIN_07; //CLK_DIO
output bool PIN_08; //DATA_DIO

native _shiftOut;
native _MSBFIRST;

// Segment byte maps for numbers 0 to 9 
var[10] byte segment_map = [ 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0X80, 0X90 ];
// Byte maps to select digit 1 to 4 
var[4] byte segment_select = [ 0xF1, 0xF2, 0xF4, 0xF8 ];

//para os LEDs começarem apagados
emit PIN_10(true);
emit PIN_11(true);
emit PIN_12(true);
emit PIN_13(true);
emit PIN_03(true);

var[4] int horario = [ 2,3,5,9 ];
var[4] int alarme = [ 0,0,0,0 ];

input (int,bool) PIN_;
code/await Pin_ (var int pin) -> NEVER do
    { pinMode(@pin, INPUT); }
    var bool v1 = _digitalRead(pin) as bool;
    loop do
        await 50ms;
        var bool v2 = _digitalRead(pin) as bool;
        if v1 != v2 then
            v1 = v2;
            await async (pin,v1) do
                emit PIN_(pin,v1);
            end
        end
    end
end

spawn Pin_(_A1);
spawn Pin_(_A2);
spawn Pin_(_A3);

code/await Display (var&[4] int v) -> NEVER do
    loop do
        var int i;
        loop i in [0 -> 4[ do
            emit PIN_04(false);
            _shiftOut ( 8, 7, _MSBFIRST, outer.segment_map[v[i]] );
            _shiftOut ( 8, 7, _MSBFIRST, outer.segment_select[i] );
            emit PIN_04(true);
        end
        await async do end;
        //await 5ms; //enquanto nao tem o async
    end
end

code/call AumentaHora (var&[4] int vHorario) -> none do
    if vHorario[1] < 9 then
        vHorario[1] = vHorario[1] + 1;
    else
        vHorario[1] = 0;
        vHorario[0] = vHorario[0] + 1;
    end
    if vHorario[0] == 2 and vHorario[1] == 4 then
        vHorario[0] = 0;
        vHorario[1] = 0;
    end
end

code/call AumentaMinuto (var&[4] int vHorario) -> none do
    if vHorario[3] < 9 then
        vHorario[3] = vHorario[3] + 1;
    else
        vHorario[3] = 0;
        vHorario[2] = vHorario[2] + 1;
    end
    if vHorario[2] > 5 then
        call AumentaHora(&vHorario);
        vHorario[2] = 0;
    end
end

code/call DiminuiHora (var&[4] int vHorario) -> none do
    if vHorario[1] > 0 then
        vHorario[1] = vHorario[1] - 1;
    else
        vHorario[1] = 9;
        if vHorario [0] > 0 then
            vHorario[0] = vHorario[0] - 1;
        else
            vHorario[0] = 2;
            vHorario[1] = 3;
        end
    end
end

code/call DiminuiMinuto (var&[4] int vHorario) -> none do
    vHorario[3] = vHorario[3] - 1;
    if vHorario[3] < 0 then
        vHorario[2] = vHorario[2] - 1;
        vHorario[3] = 9;
    end
    if vHorario[2] < 0 then
        call DiminuiHora(&vHorario);
        vHorario[2] = 5;
        vHorario[3] = 9;
    end
end

code/call ComparaVetores (var&[4] int vet1, var&[4] int vet2) -> int do
    var int i;
    loop i in [0 -> 4[ do
        if vet1[i] != vet2[i] then
            escape 0;
        end
    end
    escape 1;
end

code/await Segurou_botao (var int botao) -> none do
    var int pin;
    var bool v;
    loop do
        (pin,v) = await PIN_ until pin==botao and v==false;
        par/or do
            (pin,v) = await PIN_ until pin==botao and v==true;
        with
            await 2s;
            break;
        end
    end
end


code/await Pisca (var int pin) -> NEVER do
    loop do
        emit PIN (pin,true);
        await 1s;
        emit PIN (pin,false);
        await 1s;
    end
end

spawn Display(&horario);
var int i;
var int identificarAcao;
var int isTimeOut = 0;
var bool alarmeOn = false;
loop i do
   identificarAcao = 
   do
    par do
      loop do
        par/or do
            await 1s; //Esperar 1 min
            call AumentaMinuto(&horario);
        with //par;or adicionado para ver se ComparaVetores funcionava, testar se é aqui mesmo que entraria ou não
            if alarmeOn == true then
                isTimeOut = call ComparaVetores(&alarme, &horario);
                if isTimeOut == 1 then
                    _ceu_arduino_assert(0,2);
                end
            end
            await FOREVER;
        end
      end
    with //ajuste de horario
      await Segurou_botao(_A1); //ajustar horario -> segura botao 1 --> LED1 vai ficar piscando
      escape 1;
    with
      await Segurou_botao(_A2); //alarme ON/OFF -> segura botao 2 --> LED4 vai ficar fixo se o alarme estiver ligado
      emit PIN_10(not alarmeOn);
      escape 2;
    with
      await Segurou_botao(_A3); //ajustar alarme -> segura botao 3 --> LED3 vai ficar piscando
      escape 3;
    end
   end;
  
    //_ceu_arduino_assert(0,3);
   if identificarAcao != 2 then
     var int led1;
     var int led2;
     var int led3;
     if identificarAcao == 1 then
         led1 = 13;
         led2 = 12;
         led3 = 11;
     else
         led1 = 11;
         led2 = 13;
         led3 = 12;
     end
     loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           continue/i;
       with
           await Pisca(led1);
       with
           await Segurou_botao(_A2); //segura botao 2 para ajustar as horas
           break;
       end
     end
     
     //modo de ajuste de hora --> LED1 fixo e LED2 piscando
      
     loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           if identificarAcao == 1 then
               emit PIN_13(true);
           else
               emit PIN_11(true);
           end
           continue/i;
       with
           if identificarAcao == 1 then
               emit PIN_13(false);
           else
               emit PIN_11(false);
           end
           await Pisca(led2);
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa uma hora
           if identificarAcao == 1 then
               call DiminuiHora(&horario);
           else
               call DiminuiHora(&alarme);
           end
           await 500ms;
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acrescenta uma hora
           if identificarAcao == 1 then
               call AumentaHora(&horario);
           else
               call AumentaHora(&alarme);
           end
           await 500ms;
       with
           await Segurou_botao(_A2); //segura botao 2 para ajustar os minutos
           break;
       end
     end
     
     //modo de ajuste de minuto --> LED1 e LED2 fixos e LED3 piscando
      
     loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           if identificarAcao == 1 then
               emit PIN_12(true);
           else
               emit PIN_11(true);
           end
           emit PIN_13(true);
           continue/i;
       with
           emit PIN_13(false);
           if identificarAcao == 1 then
               emit PIN_12(false);
           else
               emit PIN_11(false);
           end
           await Pisca(led3);
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa uma hora
           if identificarAcao == 1 then
               call DiminuiMinuto(&horario);
           else
               call DiminuiMinuto(&alarme);
           end
           await 500ms;
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acrescenta uma hora
           if identificarAcao == 1 then
               call AumentaMinuto(&horario);
           else
               call AumentaMinuto(&alarme);
           end
           await 500ms;
       end
     end
     
    
   else
     alarmeOn = not alarmeOn;
   end
end

#if 0
     //modo de ajuste de hora --> LED1 fixo e LED2 piscando
      
     loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           continue/i;
       with
           emit PIN_13(false); 
           loop do
             emit PIN_12(true);
             await 1s;
             emit PIN_12(false);
             await 1s;
           end
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa uma hora
           call DiminuiHora(&horario);
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acrescenta uma hora
           call AumentaHora(&horario);
       with
           await Segurou_botao2(); //segura botao 2 para ajustar os minutos
           break;
       end
     end
     
     //modo de ajuste de minutos --> LED2 e LED1 fixos e LED3 piscando
     
     loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           continue/i;
       with
           emit PIN_12(false); 
           loop do
             emit PIN_11(true);
             await 1s;
             emit PIN_11(false);
             await 1s;
           end
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa um minuto
           call DiminuiMinuto(&horario);
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acresenta um minuto
           call AumentaMinuto(&horario);
       /*O original em C nao tem essa funcionalidade de sair ao pressionar por 2 segundos
        * with
           await Segurou(); //segura botao 2 para sair
           break; */
       end
     end
     
  with //ajuste do horario do alarme --> pressionar botao 3 --> LED3 pisca
  
      await Segurou_botao3();
      loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           continue/i;
       with
           loop do
             emit PIN_11(true);
             await 1s;
             emit PIN_11(false);
             await 1s;
           end
       with
           await Segurou_botao2(); //segura botao 2 para ajustar as horas
           break;
       end
     end
      
     //modo de ajuste de hora --> LED3 fixo e LED1 piscando
      
     loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           continue/i;
       with
           emit PIN_11(false); 
           loop do
             emit PIN_13(true);
             await 1s;
             emit PIN_13(false);
             await 1s;
           end
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa uma hora
           call DiminuiHora(&alarme);
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acresenta uma hora
           call AumentaHora(&alarme);
       with
           await Segurou_botao2(); //segura botao 2 para ajustar os minutos
           break;
       end
     end
     
     //modo de ajuste de minutos --> LED3 e LED1 fixos e LED2 piscando
     
     loop do
       par/or do
           await 5s; //se nao pressionar nada por 5 segundos, sai do estado
           continue/i;
       with
           emit PIN_13(false); 
           loop do
             emit PIN_12(true);
             await 1s;
             emit PIN_12(false);
             await 1s;
           end
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa um minuto
           call DiminuiMinuto(&horario);
       with
           var int pin;
           (pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acresenta um minuto
           call AumentaMinuto(&horario);
       end
     end
    
  with //ligar/desligar o alarme --> pressionar o botao 2
  
      await Segurou_botao2();
      alarmeOn = not alarmeOn;
      
/*  with //confere se o horario bateu
  
      loop do
        if (alarme[0] == horario[0] and alarme[1] == horario[1] and alarme[2] == horario[2] and alarme[3] == horario[3]) then
          break;
        end
      end
      
      loop do
        if (alarmeOn == true) then
          emit PIN_03 (true);
          await 1s;
          emit PIN_03 (false);
          await 1s;
        else
          break;
        end
      end
  */   
  end
end
     
#endif
