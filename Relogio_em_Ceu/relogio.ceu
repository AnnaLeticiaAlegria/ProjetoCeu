#include "gpio.ceu"

//#define BugHora
#define Teste //Modo teste ativado -> Quando chega na hora do alarme, o LED4 pisca
							//Modo teste desativado -> Quando chega na hora do alarme, o buzzer é ativado

output bool PIN_03; //BUZZER

output bool PIN_13; /*LED1*/
output bool PIN_12; /*LED2*/
output bool PIN_11; /*LED3*/
output bool PIN_10; /*LED4*/

output bool PIN_04; //LATCH_DIO
output bool PIN_07; //CLK_DIO
output bool PIN_08; //DATA_DIO

native _shiftOut;
native _MSBFIRST;

//para os LEDs começarem apagados
emit PIN_10(true);
emit PIN_11(true);
emit PIN_12(true);
emit PIN_13(true);
emit PIN_03(true);

var[4] int horario = [ 2,3,5,9 ];
var[4] int alarme = [ 0,0,0,0 ];
var bool alarmeOn = false;

input (int,bool) PIN_;
code/await Pin_ (var int pin) -> NEVER do
	{ pinMode(@pin, INPUT); }
	var bool v1 = _digitalRead(pin) as bool;
	loop do
		await 50ms;
		var bool v2 = _digitalRead(pin) as bool;
		if v1 != v2 then
			v1 = v2;
			await async (pin,v1) do
				emit PIN_(pin,v1);
			end
		end
	end
end

spawn Pin_(_A1);
spawn Pin_(_A2);
spawn Pin_(_A3);

code/await Display (var&[4] int v) -> NEVER do
	// Segment byte maps for numbers 0 to 9 
	var[10] byte segment_map = [ 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0X80, 0X90 ];
	// Byte maps to select digit 1 to 4 
	var[4] byte segment_select = [ 0xF1, 0xF2, 0xF4, 0xF8 ];
	loop do
		var int i;
		loop i in [0 -> 4[ do
			emit PIN_04(false);
			_shiftOut ( 8, 7, _MSBFIRST, segment_map[v[i]] );
			_shiftOut ( 8, 7, _MSBFIRST, segment_select[i] );
			emit PIN_04(true);
		end
		await async do end;
	end
end


code/await Segurou_botao (var bool b1, var bool b2, var bool b3) -> none do
	var int pin1=_A1;
	var int pin2=_A2;
	var int pin3=_A3;
	var bool v1=b1;
	var bool v2=b2;
	var bool v3=b3;
	loop do
		loop do
			(pin1,v1) = await PIN_;
			par/or do
				await 100ms;
				v2 = true;
			with
				(pin2,v2) = await PIN_ until pin2!=pin1;
			end
			par/or do
				await 100ms;
				v3 = true;
			with
				(pin3,v3) = await PIN_ until pin3!=pin1 and pin3!=pin2;
			end
			
			if pin1 == _A1 then
				if v1 != b1 then
					if pin2 == _A2 then
						if v2 != b2 and v3 != b3 then
							break;
						end 
					else
						if v2 != b3 and v3 != b2 then
							break;
						end              
					end
				end
			else/if pin1 == _A2 then
				if v1 != b2 then
					if pin2 == _A1 then
						if v2 != b1 and v3 != b3 then
							break;
						end 
					else
						if v2 != b3 and v3 != b1 then
							break;
						end              
					end
				end       
			else
				if v1 != b3 then
					if pin2 == _A2 then
						if v2 != b2 and v3 != b1 then
							break;
						end 
					else
						if v2 != b1 and v3 != b2 then
							break;
						end              
					end
				end          
			end
		end

		par/or do
			par/and do
				if b1==true then
					(pin1,v1) = await PIN_ until pin1==_A1 and v1==b1;
				end
			with
				if b2==true then
					(pin2,v2) = await PIN_ until pin2==_A2 and v2==b2;
				end
			with
				if b3==true then
					(pin3,v3) = await PIN_ until pin3==_A3 and v3==b3;
				end
			end
		with
			await 2s;
			break;
		end
	end
end


code/await Segurou_botao_old (var int botao) -> none do
	var int pin;
	var bool v;
	loop do
		(pin,v) = await PIN_ until pin==botao and v==false;
		par/or do
			(pin,v) = await PIN_ until pin==botao and v==true;
		with
			await 2s;
			break;
		end
	end
end

code/call AumentaHora (var&[4] int vHorario) -> none do
	if vHorario[1] < 9 then
		vHorario[1] = vHorario[1] + 1;
	else
		vHorario[1] = 0;
		vHorario[0] = vHorario[0] + 1;
	end
	if vHorario[0] == 2 and vHorario[1] == 4 then
		vHorario[0] = 0;
		vHorario[1] = 0;
	end
end

code/call AumentaMinuto (var&[4] int vHorario) -> none do
	if vHorario[3] < 9 then
		vHorario[3] = vHorario[3] + 1;
	else
		vHorario[3] = 0;
		vHorario[2] = vHorario[2] + 1;
	end
	if vHorario[2] > 5 then
		call AumentaHora(&vHorario);
		vHorario[2] = 0;
	end
end

code/call DiminuiHora (var&[4] int vHorario) -> none do
	if vHorario[1] > 0 then
		vHorario[1] = vHorario[1] - 1;
	else
		vHorario[1] = 9;
		if vHorario [0] > 0 then
			vHorario[0] = vHorario[0] - 1;
		else
			vHorario[0] = 2;
			vHorario[1] = 3;
		end
	end
end

code/call DiminuiMinuto (var&[4] int vHorario) -> none do
	vHorario[3] = vHorario[3] - 1;
	if vHorario[3] < 0 then
		vHorario[2] = vHorario[2] - 1;
		vHorario[3] = 9;
	end
	if vHorario[2] < 0 then
		call DiminuiHora(&vHorario);
		vHorario[2] = 5;
		vHorario[3] = 9;
	end
end

code/await Pisca (var int pin) -> NEVER do
	loop do
		emit PIN (pin,true);
		await 1s;
		emit PIN (pin,false);
		await 1s;
	end
end

code/await IncHorario (none) -> NEVER do
	loop do
#ifdef Teste
		await 1s; //espera 1min antes de incrementar o horário
#else
		await 1min;
#endif
		call AumentaMinuto(&outer.horario);
	end
end

code/await AlarmTimeOut (none) -> NEVER do
	loop do
		if (outer.alarmeOn == true and outer.alarme[0] == outer.horario[0] and outer.alarme[1] == outer.horario[1] and outer.alarme[2] == outer.horario[2] and outer.alarme[3] == outer.horario[3]) then
			par/or do
				loop do
#ifdef Teste
					await Pisca(10); //substitui o buzzer nos testes
#else
					emit PIN_03(false);
					await 300ms;
					emit PIN_03(true);
					await 1s;
#endif
				end
			with
				await Segurou_botao(true,false,true);
			end
			//modo soneca ativado
			var int j;
			loop j in [0 -> 5[ do
				call AumentaMinuto(&outer.alarme);
			end
			await 500ms;
		else
			emit PIN_03(true); //para o buzzer parar de tocar quando o alarme é desligado
		end
		await 500ms;
	end
end

#ifdef BugHora
code/await ModoHora (none) -> NEVER do
	spawn Display(&outer.horario);
	spawn IncHorario();
	spawn AlarmTimeOut();
	await FOREVER;
end
#endif

code/await ModoOnOff (none) -> none do
	spawn Display (&outer.horario);
	emit PIN_10(outer.alarmeOn);
	outer.alarmeOn = not outer.alarmeOn;
end

code/await Timeout (none) -> none do
	loop do
		par/or do
			await 5s;
			break;
		with
			await PIN_;
		end
	end
	emit PIN_11(true);
	emit PIN_12(true);
	emit PIN_13(true);
end

code/await ModoAjuste (var&[4] int vetorHora, var int led1, var int led2, var int led3) -> none do
	spawn Display (&vetorHora);
	loop do
		par/or do
			await Pisca(led1);
		with
			await Segurou_botao(false,true,false); //segura botao 2 para ajustar as horas
			break;
		end
	end

	//modo de ajuste de hora --> LED1 fixo e LED2 piscando
	loop do
		par/or do
			emit PIN (led1,false);
			await Pisca(led2);
		with
			var int pin;
			(pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa uma hora
			call DiminuiHora(&vetorHora);
			await 500ms;
		with
			var int pin;
			(pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acrescenta uma hora
			call AumentaHora(&vetorHora);
			await 500ms;
		with
			await Segurou_botao(false,true,false); //segura botao 2 para ajustar os minutos
			break;
		end
	end

	//modo de ajuste de minuto --> LED1 e LED2 fixos e LED3 piscando
	loop do
		par/or do
			emit PIN (led2,false);
			await Pisca(led3);
		with
			var int pin;
			(pin,_) = await PIN_ until pin==_A1; //pressionar o botao 1 decrementa uma hora
			call DiminuiMinuto(&vetorHora);
			await 500ms;
		with
			var int pin;
			(pin,_) = await PIN_ until pin==_A3; //pressionar o botao 3 acrescenta uma hora
			call AumentaMinuto(&vetorHora);
			await 500ms;
		end
	end
end

var int identificarAcao;
loop do
	identificarAcao = 
	do
#ifdef BugHora
		spawn ModoHora();
#else
		spawn Display(&horario);
		spawn IncHorario();
		spawn AlarmTimeOut();
#endif
		par do
			await Segurou_botao(true,false,false);
			escape 1;
		with
			await Segurou_botao(false,true,false);
			escape 2;
		with
			await Segurou_botao(false,false,true); 
			escape 3;
		end
	end;

	par/or do
		await Timeout();
	with
		if identificarAcao == 1 then
			await ModoAjuste (&horario,13,12,11);
		else/if identificarAcao == 2 then
			await ModoOnOff();
		else
			await ModoAjuste (&alarme,11,13,12);
		end
	end
end

