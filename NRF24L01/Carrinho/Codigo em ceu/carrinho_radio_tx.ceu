#include "int0.ceu"
#include "spi.ceu"
#include "pcint2.ceu" //usar pinos 3 (PCINT19),4 (PCINT20),5 (PCINT21),6 (PCINT22) para os botões do controle

#define NRF24L01_IRQ INT0
#include "nrf24l01.ceu"
#include "wclock.ceu"
#include "usart.ceu"
#include "string.ceu"

//input none PCINT2; 

call PCINT2_Enable(_PCINT19, on); 
call PCINT2_Enable(_PCINT20, on); 
call PCINT2_Enable(_PCINT21, on); 
call PCINT2_Enable(_PCINT22, on); 

spawn USART_Init(9600);
var[20] byte str = [] .. "Controle-tx\n\r";
await USART_Tx(&str);
//{Serial.begin(9600);}
//{Serial.println("Controle-tx\n\r");}
//{_DELAY(20);}

var Lock spi = _;

var NRF24L01_Data nrf = val NRF24L01_Data(&spi, 8,7, _,_,_,_,_,_,_);
spawn NRF24L01_Init(&nrf);
await nrf.ok; // espera o rádio dar o sinal de ok

var int sendStop = 0;
var int i;
loop i do
    await 1s;
    
    var byte v = 0;
    _bitWrite(v, 0, call PCINT2_Get(_PCINT19)); //leitura do pino 3 - direita
    _bitWrite(v, 1, call PCINT2_Get(_PCINT20)); //leitura do pino 4 - esquerda
    _bitWrite(v, 2, call PCINT2_Get(_PCINT21)); //leitura do pino 5 - tras
    _bitWrite(v, 3, call PCINT2_Get(_PCINT22)); //leitura do pino 6 - frente
    
    if (sendStop == 0) then
        
        var [1] byte buf = [v];
        await NRF24L01_Tx(&nrf, &buf);
        str = [] .. "< ";
        call String_Append_INT(&str, v, _);
        call String_Append_STR(&str, "\n\r");
        await USART_Tx(&str);
//	{Serial.print("< "); Serial.println(@buf[0]); _DELAY(10);}

        if (v == 15) then // os 4 pinos estão em aberto, nenhum botão está sendo pressionado
			sendStop = 1;
        end
    else
        if (v != 15) then
            sendStop = 0;
        end
    end
end
